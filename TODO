Features:
    ☐ Choose cinema
    ☐ List available showsings, (imax, 4dx, etc)
    ☐ Hide films not interested
    ☐ Show films that are new to booking, and have come back, i.e. already exist in the DB but have since dropped out of booking.
    ☐ have a "stamp" for unlimited content
    ☐ mark a film as watched and specify a rating, the format, seats (and seat rating / notes), date / time watched and any extra notes
    ☐ favourite films interested in
    ☐ Also grab films that aren't at basildon?
    ☐ Films api fetches from DB with parsed data and stored information about film?
    ☐ Check for new films daily and update db?
    ☐ Have seperate table for user information on each film, rating, description etc...
    ☐ USE TYPESCRIPT FOR THE LOVE OF GOD, maybe?
    ☐ When rating a film, have a pop up that shows what would be below and above the score
    ☐ Coming soon films
    ☐ Have a sort/filter/search feature
    ☐ Bulk mark as favourite/hidden
    ☐ 'Delete' film so that aggregation result removes it from return
    ☐ React native
    ☐ Seat and screen selection

Redux-observable:
  ☐ store
    ☐ actions
      ☐ index.js collects reducers, epics and actions. Combines them and exports them
    ☐ configure store, takes the reducers and epics and configures them in the store

TODO:
  ☐ Update ensureauthenticated middleware
  ☐ replace all axios calls with RxJS?
  ☐ Add logging
  ☐ Add validation
  ☐ Use all-performances instead of film_times as it provides director, cast, length etc...
  ☐ Use .toLocaleString() for all date calls
  ☐ Have logout call redux so its more responsive
  ☐ Connect only whats needed in lower apps, rather than passing props all the way through
    ✔ Also tidy up filters in App.mapStateToProps @done(19-02-15 13:02)
  ✘ Have redux manage ALL State? @cancelled(19-02-15 14:05)
  ✔ Abstract logical components, especially in film @done(19-02-15 14:00)
  ☐ List next showing in overview page, have 3 wide colums rather than 2
  ✔ Extract utility functions in components into components/utils/index.js @done(19-02-15 10:27)
  ☐ Add cancel button for 'Watched' form
  ☐ Add edit button for Watched films
  ✔ Update render to use configurestore instead? @done(19-01-18 16:41)
  ☐ Have watched and expired in films page, have date watched on film badge
  ☐ chunk build and load asyncronously
  ☐ filter by date playing
  
FIX:
	☐ fix film showtimes so that if only one format centers gracefully 
  ☐ Fix server rendering as its not rendering routes or styles properly, althought might be dev only issue
  ☐ Sort out footer
  ✔ Fix play button so it centers properly in image @done(19-02-15 10:13)
  ✔ When refreshing the page on a specific film, server crashes with poster undefined @done(19-02-08 11:23)
    Id returned was a object so was failing on type check

Build:
    ☐ Add build step for backend -> lib?
    ☐ Add start script for production

Archive:
  ✔ Users: @done(19-01-18 11:14) @project(Features)
    ✔ id: number @done(19-01-18 11:14) @project(Features)
    ✔ username: string @done(19-01-18 11:14) @project(Features)
    ✔ password? @done(19-01-18 11:14) @project(Features)
    ✔ films: array @done(19-01-18 11:15) @project(Features)
  ✔ Films: @done(19-01-18 11:14) @project(Features)
    ✔ id: number (generated by shortid from a fetch), related to films table @done(19-01-18 11:15) @project(Features)
    ✔ title @done(19-01-18 11:15) @project(Features)
    ✔ formats @done(19-01-18 11:15) @project(Features)
    ✔ poster @done(19-01-18 11:15) @project(Features)
    ✔ url @done(19-01-18 11:15) @project(Features)
    ✔ cinema: object @done(19-01-18 11:15) @project(Features)
    ✔ id: number @done(19-01-18 11:15) @project(Features)
    ✔ name: string @done(19-01-18 11:15) @project(Features)
    ✔ unlimited (grab from title) @done(19-01-18 11:15) @project(Features)
    ✔ ignored/hidden (defaults to false) @done(19-01-18 11:15) @project(Features)
    ✔ favourited (defaults to false) @done(19-01-18 11:15) @project(Features)
    ✔ watched (null/object): @done(19-01-18 11:15) @project(Features)
      ✔ rating: number 0/100 @done(19-01-18 11:15) @project(Features)
      ✔ format: string 2D/4D etc.. (provide from data in db, or add custom) @done(19-01-18 11:15) @project(Features)
      ✔ screen: object Screen @done(19-01-18 11:15) @project(Features)
      ✔ date / time @done(19-01-18 11:15) @project(Features)
      ✔ notes / rating @done(19-01-18 11:15) @project(Features)
  ✔ Screen: (have seperate table for seats, so they're searchable, only allow one entry per seat) @done(19-01-18 11:14) @project(Features)
    ✔ id: number @done(19-01-18 11:15) @project(Features)
    ✔ screen-number: number @done(19-01-18 11:15) @project(Features)
    ✔ seats: object, key = seat number (seed this data?) @done(19-01-18 11:15) @project(Features)
    ✔ number: string @done(19-01-18 11:15) @project(Features)
    ✔ rating: number (0/100) @done(19-01-18 11:15) @project(Features)
    ✔ notes: string @done(19-01-18 11:15) @project(Features)