Features:
    ☐ link to imdb page iwth rating, pull trailer from there rather then youtube?
    ☐ Choose cinema
    ☐ List available showsings, (imax, 4dx, etc)
    ✔ Hide films not interested @done(19-02-28 15:48)
    ✔ Show films that are new to booking, @done(19-02-28 15:48)
    ☐ show films that have come back, i.e. already exist in the DB but have since dropped out of booking.
    ✔ have a "stamp" for unlimited content @done(19-02-28 15:48)
    ☐ mark a film as watched and specify a rating, the format, seats (and seat rating / notes), date / time watched and any extra notes
    ✔ favourite films interested in @done(19-02-28 16:14)
    ☐ Also grab films that aren't at basildon?
    ☐ Films api fetches from DB with parsed data and stored information about film?
    ✔ Check for new films daily and update db? @done(19-02-28 16:14)
    ✘ Have seperate table for user information on each film, rating, description etc... @cancelled(19-02-28 16:14)
    ✔ USE TYPESCRIPT FOR THE LOVE OF GOD, maybe? @done(19-02-28 15:48)
    ☐ When rating a film, have a pop up list that shows what would be below and above the score
    ☐ Coming soon films
    ☐ Have a sort/filter/search feature
    ☐ Bulk mark as favourite/hidden
    ☐ 'Delete' film so that aggregation result removes it from return, i.e. mark as deleted in user part of the database, but don't actually delete it
    ☐ React native
    ☐ Seat and screen selection
    ☐ Custom film entry
    ☐ automatically unfavourite film when submiting review
    ☐ show all availble films option even if watched

Redux-observable:
  ☐ store
    ☐ actions
      ☐ index.js collects reducers, epics and actions. Combines them and exports them
    ☐ configure store, takes the reducers and epics and configures them in the store

TODO:
  ☐ sorting mechanic, default to new/a-z
  ☐ checkUserData -> make getUserData and convert to a method that gets the property whilst checking conditions...
    Only problem is the use of magic strings to essentially access nested properties...
    Maybe have some sort of check to make sure it's only specific string?
  ☐ make the icon class more multipurpose
  ☐ from Film.tsx move trailer state into trailer class?
  ☐ from Film.tsx move film state into film
  ☐ have next available show date and last available day in filmgroup
  ☐ implement cookie consent
  ☐ distinguishing break between filmgroups, a line, or some sore of boxshadow???
  ✔ Update ensureauthenticated middleware @done(19-02-28 16:37)
  ☐ replace all axios calls with RxJS? ajax has post/get methods
  ✘ rmeove async calls and move back to rxjs / acxios @cancelled(19-02-28 16:17)
    these are only server side so leaving them as is.
  ☐ Add logging
  ☐ Add validation to rest end points
  ✘ Use all-performances instead of film_times as it provides director, cast, length etc... @cancelled(19-03-09 18:07)
    film_times does provide these, used film times
  ✘ Use .toLocaleString() for all date calls @cancelled(19-02-28 16:16)
    using custom formatDate function
  ☐ Have logout call redux so its more responsive
  ☐ Connect only whats needed in lower apps, rather than passing props all the way through
    ✔ Also tidy up filters in App.mapStateToProps @done(19-02-15 13:02)
  ✘ Have redux manage ALL State? @cancelled(19-02-15 14:05)
  ✔ Abstract logical components, especially in film @done(19-02-15 14:00)
  ☐ List next showing in overview page, have 3 wide colums rather than 2
  ✔ Extract utility functions in components into components/utils/index.js @done(19-02-15 10:27)
  ☐ Add cancel button for 'Watched' form
  ☐ Move rating and watched next to / under title move review under poster
  ☐ Add edit button for Watched films
  ✔ Update render to use configurestore instead? @done(19-01-18 16:41)
  ☐ Have watched and expired in films page, have date watched on film badge
  ✔ chunk build and load asyncronously @done(19-02-28 16:18)
  ☐ filter by date playing
  ✔ chunk webpack file and async load it??????? @done(19-02-28 16:18)
  ☐ TESTSSS!!!
  ☐ update look of login with google
  ☐ split cron job into seperate service and run on home server instead of on heroku
  ☐ styled-components theme at top level ts
  ☐ When clicking on a booking, pop up with a booked? modal that then adds a booked object to the film?
  ☐ have userData as sub reducer of films
  ✔ Do something about the showtimes processing, move it to the server and have it as part of the object? Kinda makes sense... @done(19-02-28 16:19)
  ☐ Move ALL dispatch based RxJS code to epics, inclduing the debounce thing from Film.js
  ☐ Have spinners / errors for failures in async alls, use this pattern to call 
    action$.pipe(
      ofType(actions.SEND_EMAIL),
      mergeMap(payload =>
        merge(
          // We are processing, -- this will happen 'syncrhonously' in the stream
          of(actions.processingSubmission(true)),
          // When this resolves, it will map into the stream and process the appropriate action... Boom.
          Observable.from(fetch(endpoint)).pipe(
            // It worked, tada!
            mapTo(someAction),
            // Oh no it failed!
            catchError(err => actions.processingSubmissionFailed(err))
          )
        )
      )
    );

Code Splitting / performance:
  ☐ Epics
  ✔ prefetch modules not appending / to path, so its /asssetsFilm.... @done(19-02-28 08:25)
    wepback.output.publicPath - /assets /assets/
  ☐ error boundries around loadable components
  ☐ tests
  ✘ move back to promises rather then async @cancelled(19-02-28 15:47)
    all async calls are server side, rather then in the bundles
  http2 / server push:
    ☐ redux state
    ☐ react renderToString
    ☐ other js assets

Typescript:
  ✔ Tidy up type files, use namespaces? @done(19-02-25 13:34)
  ✔ Have different interfaces for mongo data and front end data / use namespaces(modules) to 'namespace' them @done(19-02-25 13:34)

FIX:
  ☐ have better handling of if trailer not found
  ✔ trailer not going full size due to reszie, maybe use lodash to debounce? @done(19-03-16 09:25)
  ✔ figure out why css isn't loading on first page load, looks like bootstrap... @done(19-02-28 09:56)
    because it wasn't extracted out to a css file, will only work in production
  ☐ add react router link to home page link
  ✔ icons not loading in production @done(19-02-28 09:56)
    this seems to have fixed itself, probably because of css extraction
	☐ fix film showtimes so that if only one format centers gracefully 
  ✘ Fix server rendering as its not rendering routes or styles properly, althought might be dev only issue @cancelled(19-02-28 09:57)
  ☐ Sort out footer, not sticking to bottom of page
  ✔ Trailer modal not popping up @done(19-02-25 09:18)
  ✔ Todays date in showtime not highlighting @done(19-02-25 09:19)
  ✔ Fix play button so it centers properly in image @done(19-02-15 10:13)
  ✔ When refreshing the page on a specific film, server crashes with poster undefined @done(19-02-08 11:23)
  Id returned was a object so was failing on type check
  
Build:
    ✔ Add build step for backend -> lib? @done(19-02-28 15:48)
    ✔ Add start script for production @done(19-02-28 15:48)

Archive:
  ✔ Users: @done(19-01-18 11:14) @project(Features)
    ✔ id: number @done(19-01-18 11:14) @project(Features)
    ✔ username: string @done(19-01-18 11:14) @project(Features)
    ✔ password? @done(19-01-18 11:14) @project(Features)
    ✔ films: array @done(19-01-18 11:15) @project(Features)
  ✔ Films: @done(19-01-18 11:14) @project(Features)
    ✔ id: number (generated by shortid from a fetch), related to films table @done(19-01-18 11:15) @project(Features)
    ✔ title @done(19-01-18 11:15) @project(Features)
    ✔ formats @done(19-01-18 11:15) @project(Features)
    ✔ poster @done(19-01-18 11:15) @project(Features)
    ✔ url @done(19-01-18 11:15) @project(Features)
    ✔ cinema: object @done(19-01-18 11:15) @project(Features)
    ✔ id: number @done(19-01-18 11:15) @project(Features)
    ✔ name: string @done(19-01-18 11:15) @project(Features)
    ✔ unlimited (grab from title) @done(19-01-18 11:15) @project(Features)
    ✔ ignored/hidden (defaults to false) @done(19-01-18 11:15) @project(Features)
    ✔ favourited (defaults to false) @done(19-01-18 11:15) @project(Features)
    ✔ watched (null/object): @done(19-01-18 11:15) @project(Features)
      ✔ rating: number 0/100 @done(19-01-18 11:15) @project(Features)
      ✔ format: string 2D/4D etc.. (provide from data in db, or add custom) @done(19-01-18 11:15) @project(Features)
      ✔ screen: object Screen @done(19-01-18 11:15) @project(Features)
      ✔ date / time @done(19-01-18 11:15) @project(Features)
      ✔ notes / rating @done(19-01-18 11:15) @project(Features)
  ✔ Screen: (have seperate table for seats, so they're searchable, only allow one entry per seat) @done(19-01-18 11:14) @project(Features)
    ✔ id: number @done(19-01-18 11:15) @project(Features)
    ✔ screen-number: number @done(19-01-18 11:15) @project(Features)
    ✔ seats: object, key = seat number (seed this data?) @done(19-01-18 11:15) @project(Features)
    ✔ number: string @done(19-01-18 11:15) @project(Features)
    ✔ rating: number (0/100) @done(19-01-18 11:15) @project(Features)
    ✔ notes: string @done(19-01-18 11:15) @project(Features)